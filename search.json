[
  {
    "objectID": "visual_search_experiment.html",
    "href": "visual_search_experiment.html",
    "title": "Visual Search Report",
    "section": "",
    "text": "Imports and setup\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport numpy as np\nimport seaborn as sns\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom pathlib import Path\n\n# classes for special types\nfrom pandas.api.types import CategoricalDtype\n\n# Apply the default theme\nsns.set_theme(style=\"ticks\")\n\n# Set default precision for displaying numbers\npd.set_option(\"display.precision\", 2)#| \n\n\n\nIntroduction\nThe visual search experiment is a psychology experiment that is used to study how the human visual system processes and searches for specific stimuli in a visual scene. The experiment typically involves presenting participants with a visual display, such as a picture or a computer screen, that contains a number of objects or stimuli. The participants are then asked to search for a specific target stimulus, such as a pink line, among the other stimuli in the display.\nDuring the experiment, the researcher may manipulate various factors, such as the number of stimuli in the display, the similarity of the stimuli to the target, or the location of the target within the display. These manipulations allow the researcher to study how different factors affect the speed and accuracy of the participant’s search for the target stimulus.\nOne of the most widely used manipulation in visual search experiment is the set size, which is the number of stimuli in the display. The experimenter increases the set size and observe how it affects the reaction time of the participants.\nAnother manipulation that is often used in visual search experiments is the similarity of the stimuli to the target. This can include manipulating the color, shape, or size of the stimuli to make them more or less similar to the target. The experimenter can observe how these manipulations affect the speed and accuracy of the participant’s search for the target.\nThe visual search experiment is a powerful tool for studying the human visual system because it allows researchers to study how the brain processes and searches for specific stimuli in a visual scene.\nOverall, visual search experiment is a widely used method in cognitive psychology to study how visual perception and attention work. It provides researchers with a tool to investigate fundamental question about how we perceive and process visual information in the world around us.\n(Wolfe and Horowitz 2008)\n\n\nExperiment Setup\nWe will study how the reaction time changes as set size increases under different circumstances. Specifically, the effects of set size, homogeneity (feature vs. conjunction) and target presence on reaction time will be examined. A total of N=3 participants will be recruited for the study. We then fit a linear regression model predicting the reaction time based on the set size, search type and target presence. We will be interested in the coefficient in the linear model corresponding to set size. We can think of the slope as giving us a measure of how much does the reaction time increase, if we increase the set size by 1. This will be our measure of efficiency.\nThe experiment will consist of 300 trials, in which participants will be presented with an image containing a set of lines with different orientations (either / or \\). The participants will be instructed to search for a pink line with an orientation of / and indicate whether it is present or absent. The trials will vary in set size (10, 20, 30, or 40) and search type (feature or conjunction). In feature search, the image will contain only lines of a single color (lines with orientation \\ act as distractors), while in conjunction search, the image will contain a mixture of blue and pink lines (blue lines and pink lines with orientation \\ act as distractors). Participants will be provided with feedback on the accuracy of their responses and encouraged to respond as quickly as possible. The estimated duration of the experiment is approximately 15-20 minutes.\nThe participants consisted of students in age range 20-25 years old. Both genders were represented. The participants were seated in front of a 14-inch monitor with 1920x1080 resolution and instructed to make themselves comfortable. No training trials were conducted prior to the experiment. No participant needed to take a break during the experiment.\n\n\nLoad data\ndata_path = Path('data/')\n\ndef load_file(filepath : Path) -> pd.DataFrame:\n    participant_id = filepath.stem\n    df = pd.read_csv(filepath)\n    \n    # Delete rows that do not contain response data\n    df = df[df.trial_type == 'canvas-keyboard-response']\n    \n    df['participant'] = participant_id\n    df = df.rename(\n      {\"setSize\": \"set_size\"},\n      axis=1\n      )\n    df = df[\n      ['participant', 'present', 'set_size', 'conjuction','correct' , 'rt']\n      ]\n    df = df.astype(\n      {\n        \"participant\": int,\n        \"present\": bool,\n        'set_size': int, \n        'conjuction': bool,\n        'correct': bool,\n        'rt': int\n      }\n    )\n    df = df.reset_index(drop=True)\n    \n    return df\n\n\ndf_all = pd.concat(\n    load_file(file) for file in data_path.glob(\"*.csv\")\n  )\\\n  .reset_index(drop=True)\ndf_all = df_all[df_all['participant'] > 0]\n\n\n\n\nPrint sample of the data\ndf_all.head()\n\n\n\n\n\nSample of the input data.\n  \n    \n      \n      participant\n      present\n      set_size\n      conjuction\n      correct\n      rt\n    \n  \n  \n    \n      0\n      1\n      True\n      30\n      True\n      True\n      2975\n    \n    \n      1\n      1\n      True\n      20\n      True\n      True\n      713\n    \n    \n      2\n      1\n      False\n      20\n      True\n      True\n      1641\n    \n    \n      3\n      1\n      False\n      30\n      False\n      True\n      2071\n    \n    \n      4\n      1\n      False\n      10\n      True\n      True\n      1064\n    \n  \n\n\n\n\n\n\nRemove incorrect responses\ndf_correct = df_all[df_all.correct]\n\n\n\n\nResults\nFirstly, in Table 1 we report the accuracy (percentage of errors for each participant). Additionally Figure 1 we report the accuracy of the participants on different search types as well as set sizes. We remove the error trials for the subsequent analysis.\n\n\nReport accuracy\nhlp = df_all.groupby('participant')\\\n  .agg(accuracy=('correct', 'mean'))\\\n  .round(decimals=3)\\\n  .reset_index()\nhlp = hlp.rename(\n  {\n    \"participant\": \"Participant\",\n    \"accuracy\": \"Accuracy\",\n  },\n  axis='columns'\n)\n\nhlp\n\n\n\n\n\n\nTable 1:  Participant accuracy. \n  \n    \n      \n      Participant\n      Accuracy\n    \n  \n  \n    \n      0\n      1\n      0.94\n    \n    \n      1\n      2\n      0.98\n    \n    \n      2\n      3\n      0.94\n    \n  \n\n\n\n\n\n\n\nReport accuracy by homogeneity and participant\nhlp = df_all.groupby(['participant','set_size', 'conjuction'])\\\n  .agg(\n    Correct=('correct', 'mean'),\n    Incorrect=('correct', lambda _: 1 - _.mean())\n  )\\\n  .reset_index()\nhlp = pd.melt(\n  hlp,\n  id_vars=['participant','set_size', 'conjuction'],\n  var_name='is_correct', value_name='perc'\n)\nhlp['participant'] = hlp['participant'].astype(str)\nhlp['set_size'] = hlp['set_size'].astype(str)\nhlp['conjuction'] = hlp['conjuction'].map(\n  lambda _: 'Conjunction' if _ else 'Feature'\n  )\nhlp = hlp.sort_values(['participant', 'set_size'])\n\ng = sns.displot(\n    data=hlp,\n    x='set_size',\n    hue='is_correct',\n    multiple='stack',\n    col='participant',\n    row='conjuction',\n    weights='perc',\n    palette={'Correct': 'g', 'Incorrect': 'r'},\n    hue_order=['Incorrect', 'Correct'],\n    facet_kws=dict(margin_titles=True),\n)\ng.set_titles(col_template=\"Participant {col_name}\", row_template=\"{row_name}\")\ng.set_ylabels(\"Accuracy\")\ng.set_xlabels(\"Set size\")\ng.legend.set_title(\"Answer\")\ng.fig.subplots_adjust(top=0.9)\ng.fig.suptitle(\n  \"Accuracy for each participant split by set size and homogeneity.\"\n  );\n\n\n\n\n\nFigure 1: Accuracy of of each participant (column) split by homogeneity (row).\n\n\n\n\nIn Figure 2 we report the distribution of reaction times split by set size for each participant.\n\n\nReport reaction time split by set size\nhlp = df_correct[[\"participant\", \"set_size\", \"rt\"]].copy()\n\n# Treat set size as categorical data\nhlp[\"set_size\"] = hlp[\"set_size\"].astype(str)\n\ng = sns.catplot(\n  data=hlp, \n  y=\"set_size\", x=\"rt\",\n  hue='participant',\n  kind='box',\n  aspect=2,\n  )\ng.ax.xaxis.grid(True)\ng.set_xlabels(\"Reaction time (ms)\")\ng.set_ylabels(\"Set size\")\ng.set(title=\"Reaction times of participants split by set size\");\n\n\n\n\n\nFigure 2: Reaction times divided by set size.\n\n\n\n\nNext, we focus our attention on predicting the reaction times based on set size. We are interested in how the performance changes if we change the homogeneity (feature/conjunction) and target presence. In Table 2 we report the set size effect (search slope) for each case and participant with the 95% confidence interval.\nIt is noteworthy that the slope for feature search is consistently lower compared to conjunction search (when the target is present). This trend is also observed for target absent trials in both feature and conjunction searches. Lastly, the absence of the target leads to an increase in the search slope, regardless of the search type.\nThese observations are also depicted in the Figure 3.\n\n\nFit regression models\n# Fit a linear regression model predicting the reaction time based on set size.\n# Consider cases with different homogeneity and whether the target was present\n# or not and report the slope of the coefficient for reaction time and 95%\n# confidence interval. This time consider\n\nparticipants = df_correct.participant.unique()\ndf_result = pd.DataFrame(\n  columns=[\n    \"participant\", \"conjunction\", \"present\", \"set_size_slope\", \"ci_l\", \"ci_u\", \n    \"r2\",\n    ]\n  )\nfor participant in participants:\n    for is_conjunction in [True, False]:\n        for target_present in [True, False]:\n            hlp = df_correct[\n                (df_correct.participant == participant) &\n                (df_correct.conjuction == is_conjunction) &\n                (df_correct.present == target_present)\n            ]\n            model = smf.ols('rt ~ set_size', data=hlp)\n            result = model.fit()\n\n            ci = result.conf_int(alpha=0.05).loc[\"set_size\"]\n            tmp = [\n                participant,\n                int(is_conjunction),\n                int(target_present),\n                result.params[\"set_size\"],\n                ci[0],\n                ci[1],\n                result.rsquared\n            ]\n            df_result = pd.concat(\n              [df_result, pd.DataFrame([tmp], columns=df_result.columns)],\n              ignore_index=True\n              )\n\ndf_result = df_result.assign(\n    yerr=lambda _: np.abs(_['set_size_slope'] - _['ci_l']),\n)\n\n\n\n\nReport search slope with confidence intervals\n# Print pretty table\nhlp = df_result[\n    ['participant', 'conjunction', 'present', 'set_size_slope', 'ci_l','ci_u']\n].copy()\nhlp['conjunction'] = hlp['conjunction'].map(\n  lambda _: 'Conjunction' if _ == 1 else 'Feature'\n  )\nhlp['present'] = hlp['present'].map(lambda _: 'Y' if _ == 1 else 'F')\nhlp = hlp.rename(\n    {\n        \"participant\": \"Participant\",\n        \"conjunction\": \"Homogeneity\",\n        \"present\": \"Target Present\",\n        \"set_size_slope\": \"Search Slope\",\n        \"ci_l\": \"95% CI Lower\",\n        \"ci_u\": \"95% CI Upper\",\n    },\n    axis='columns'\n)\nhlp.reset_index(drop=True)\n\n\n\n\n\n\nTable 2:  Search slope with 95% confidence intervals. \n  \n    \n      \n      Participant\n      Homogeneity\n      Target Present\n      Search Slope\n      95% CI Lower\n      95% CI Upper\n    \n  \n  \n    \n      0\n      1\n      Conjunction\n      Y\n      8.20\n      0.13\n      16.27\n    \n    \n      1\n      1\n      Conjunction\n      F\n      9.14\n      2.22\n      16.07\n    \n    \n      2\n      1\n      Feature\n      Y\n      -2.18\n      -5.95\n      1.59\n    \n    \n      3\n      1\n      Feature\n      F\n      6.12\n      -0.05\n      12.29\n    \n    \n      4\n      3\n      Conjunction\n      Y\n      17.91\n      9.77\n      26.06\n    \n    \n      5\n      3\n      Conjunction\n      F\n      17.77\n      7.89\n      27.66\n    \n    \n      6\n      3\n      Feature\n      Y\n      4.40\n      -2.74\n      11.53\n    \n    \n      7\n      3\n      Feature\n      F\n      13.69\n      6.49\n      20.90\n    \n    \n      8\n      2\n      Conjunction\n      Y\n      4.78\n      -1.24\n      10.79\n    \n    \n      9\n      2\n      Conjunction\n      F\n      24.34\n      17.54\n      31.14\n    \n    \n      10\n      2\n      Feature\n      Y\n      -1.59\n      -10.00\n      6.83\n    \n    \n      11\n      2\n      Feature\n      F\n      10.69\n      2.14\n      19.23\n    \n  \n\n\n\n\n\n\n\nPlot search slopes with confidence intervals\n# Plot search slope for target present absent and feature or conjunction\nfrom matplotlib.lines import Line2D\n\ncolors = ['C0', 'C1', 'C2']\nmarkers = []\nlabels = []\nfor participant, color in enumerate(colors):\n    for target_present, shape in [('present', 'o'), ('absent', 's')]:\n        marker = Line2D(\n            [], [], color=color, marker=shape, linestyle='none', markersize=5\n        )\n        markers.append(marker)\n        labels.append(\n          'Participant ' + str(participant + 1) + ', ' + target_present\n          )\n    \n    \nmin_y = np.floor(df_result.ci_l.min()) - 1\nmax_y = np.ceil(df_result.ci_u.max()) + 1\n\nfig, axes = plt.subplots(1, 2, figsize=(16, 5))\n\ndata = [\n        (\"Feature\", df_result[df_result.conjunction == 0]),\n        (\"Conjunction\", df_result[df_result.conjunction == 1])\n]\n\ndelta = 0.1\nfor i, (title, df) in enumerate(data):\n    for target_present in [True, False]:\n        hlp = df[df.present == target_present]\n        \n        axes[i].scatter(\n            hlp.participant + (-delta if target_present else delta),\n            hlp.set_size_slope,\n            color=colors,\n        )\n\n        for color, participant in zip(colors, hlp.participant):\n            row = hlp[hlp.participant == participant]\n            \n            axes[i].errorbar(\n                participant + (-delta if target_present else delta),\n                row.set_size_slope,\n                yerr=row.yerr,\n                ls='none',\n                marker='o' if target_present else 's',\n                ecolor=color,\n                c=color,\n            )\n\n    # Hide the right and top spines\n    axes[i].spines[['right', 'top']].set_visible(False)\n    axes[i].grid(which='major', axis='y', linestyle='-')\n    axes[i].set_xticks(hlp.participant.astype(float))\n    axes[i].set(title=title, xlabel='Participant', ylabel='Slope')\n    axes[i].set_ylim(bottom=min_y, top=max_y)\n\nfig.suptitle(\"Search slope with 95% confidence intervals\")\nfig.tight_layout()\nfig.subplots_adjust(right=0.85)\nfig.legend(\n    markers,\n    labels,\n    loc=7,\n);\n\n\n\n\n\nFigure 3: Search slope with 95% confidence intervals. The left figure contains the values for feature search, the right for conjunction search. Two values for each participant are shown. One for target present (circle) and one for target absent (square).\n\n\n\n\n\n\nConclusion\nWe now address the observed results.\nFirst, we address the variations in slopes for different search types in the presence of the target. The visual salience of the target in feature search leads to it immediately capturing our attention as it drastically differs from its surroundings. Conversely, the presence of distractors results in several similar items attracting our attention, which necessitates the examination of more items, thereby leading to an increase in reaction time, which agrees with our observations.\nNext we address the difference in slope for the target absent trials. In target present trials, it is generally necessary to examine roughly half of the set size items until the target is found. However, in the absence of the target, the participant must spend more time examining the objects in search of a target, which results in an increase in reaction time, which is consistent with our observations.\n\n\n\n\n\n\n\n\nReferences\n\nWolfe, J., and T. S. Horowitz. 2008. “Visual Search.” Scholarpedia 3 (7): 3325. https://doi.org/10.4249/scholarpedia.3325."
  }
]